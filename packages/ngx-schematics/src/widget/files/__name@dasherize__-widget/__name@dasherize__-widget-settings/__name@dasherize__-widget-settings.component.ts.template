import { Component, Inject, ViewContainerRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CustomizableComponent } from 'cmf-core';
import { WidgetSettingsModule, WidgetSettingsService } from 'cmf-core-dashboards';

import { <%= classify(name) %>WidgetSettingsService, <%= classify(name) %>WidgetSettings } from './<%= dasherize(name) %>-widget-settings.service';

/**
 * @whatItDoes
 *
 * Please provide a meaningful description of this Widget Settings and what it is needed for.
 * Also describe all the properties that are configurable in the correspondent Widget
 *
 * ### Widget Configurable Properties
 * * `string` : **name** _(default)_ - The name of the widget
 * * `string` : **description** _(default)_ - The description of the widget
 * * `string` : **iconClass** _(default)_ - The icon CSS class to change the widget icon
 *
 * @description
 *
 * ## <%= nameify(name) %> Widget Settings Component
 *
 * ### Dependencies
 *
 * #### Components
 * * ComponentA : `package`
 * * ComponentB : `package`
 *
 * #### Services
 * * ServiceA : `package`
 * * ServiceB : `package`
 *
 * #### Directives
 * * DirectiveA : `package`
 * * DirectiveB : `package`
 *
 */
@Component({
    standalone: true,
    selector: '<%= dasherize(project) %>-<%= dasherize(name) %>-widget-settings',
    imports: [CommonModule, WidgetSettingsModule],
    templateUrl: './<%= dasherize(name) %>-widget-settings.component.html',
    <% if (style !== 'none') { %>styleUrl: './<%= dasherize(name) %>-widget-settings.component.<%= style %>'<% } %>,    
    providers: [
        { provide: WidgetSettingsService, useClass: <%= classify(name) %>WidgetSettingsService }
    ]
})
export class <%= classify(name) %>WidgetSettingsComponent extends CustomizableComponent {

    /**
     * Constructor
     */
    constructor(
        viewContainerRef: ViewContainerRef,
        @Inject(WidgetSettingsService) settings: <%= classify(name) %>WidgetSettingsService
    ) {
        super(viewContainerRef);

        settings.on<%= classify(name) %>SettingsLoaded = this.onLoad.bind(this);
        settings.on<%= classify(name) %>SaveSettings = this.onSave.bind(this);
    }

    
    /**
     * Loads the widget settings
     * @returns: A Promise to resolve the settings
     */
    public async onLoad(settings: <%= classify(name) %>WidgetSettings): Promise<<%= classify(name) %>WidgetSettings> {
        return settings;
    }

    /**
     * Saves the widget settings
     */
    public onSave(settings: <%= classify(name) %>WidgetSettings): <%= classify(name) %>WidgetSettings {
        return settings;
    }
}
