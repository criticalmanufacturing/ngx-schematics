import {
    Component,
    ElementRef,
    NgModule,
    ViewContainerRef
} from '@angular/core';

import {
    FeedbackService
} from 'cmf-core';

import {
    Widget,
    WidgetGeneric,
    WidgetRepresentation,
    WidgetViewMode
} from 'cmf-core-dashboards';

import {
    <%= classify(name) %>WidgetSettingsComponent
} from './<%= dasherize(name) %>-widget-settings/<%= dasherize(name) %>-widget-settings.component';

/**
 * @whatItDoes
 *
 * Please provide a meaningful description of this widget.
 * Try to answer these questions here:
 * * What is it?
 * * What it does?
 * * How does it behave with different sizes?
 * * Does it retrieve data from any external source (server, local database, text file, etc...)?
 *
 * @howToUse
 *
 * The widget is used in an UIPage with the inputs and outputs mentioned below.
 *
 * Also the configurable settings of the widget are referred in Widget Settings Component
 *
 * Besides the description above, please complement it with a meaningful description of this widget that answer these questions:
 * * How to use it?
 * * Where and When to use it?
 *
 * ### Widget Inputs
 * * `string` : **name** _(default)_ - The name of the widget
 * * `string` : **description** _(default)_ - The description of the widget
 * * `string` : **iconClass** _(default)_ - The icon CSS class to change the widget icon
 *
 * ### Widget Outputs
 * * `string` : **valueChange** _(default)_ - The icon CSS class to change the widget icon
 *
 * ### Widget Settings
 * See {@link WidgetSettingsComponent}
 *
 * ### _NOTES_
 * (Optional: Provide additional notes here)
 *
 * @description
 *
 * ## <%= nameify(name) %> Widget Component
 *
 * ### Dependencies
 *
 * #### Components
 * * ComponentA : `package`
 * * ComponentB : `package`
 *
 * #### Services
 * * ServiceA : `package`
 * * ServiceB : `package`
 *
 * #### Directives
 * * DirectiveA : `package` (Ex: `cmf.core.controls`)
 * * DirectiveB : `package` (Ex: `cmf.core.controls`)
 *
 */
@Widget({
    name: $localize`:@@<%= dasherize(project) %>/<%= dasherize(name) %>-widget#NAME:<%= nameify(name) %> Widget`,
    iconClass: 'icon-core-st-lg-generic',
    settingsComponent: {
        component: <%= classify(name) %>WidgetSettingsComponent
    }
})
@Component({
    selector: '<%= dasherize(project) %>-<%= dasherize(name) %>-widget',
    templateUrl: './<%= dasherize(name) %>-widget.component.html',
    <% if (style !== 'none') { %>styleUrls: ['./<%= dasherize(name) %>-widget.component.<%= style %>']<% } %>
})
export class <%= classify(name) %>WidgetComponent extends WidgetGeneric implements WidgetRepresentation {

    /**
     * Defines how the widget will be represented
     */
    public uiWidgetViewMode: WidgetViewMode = WidgetViewMode.Normal;

    /**
     * Constructor
     */
    constructor(
        viewContainerRef: ViewContainerRef,
        elementRef: ElementRef,
        feedback: FeedbackService
    ) {
        super(viewContainerRef, elementRef, feedback);
    }
}

@NgModule({
    imports: [],
    declarations: [<%= classify(name) %>WidgetComponent],
    exports: [<%= classify(name) %>WidgetComponent]
})
export class <%= classify(name) %>WidgetModule { }